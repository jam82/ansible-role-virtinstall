---
# role: ansible-role-virtinstall
# file: tasks/main.yml

# - name: "Install VMs"
#   ansible.builtin.include_tasks: vm.yml
#   loop: "{{ virtinstall_vms }}"

- name: "List all VMs"
  delegate_to: "{{ virtinstall_host }}"
  community.libvirt.virt:
    command: list_vms
    uri: "{{ virtinstall_connection }}"
  register: all_vms

- name: "Generate mac address per defined network card"
  delegate_to: localhost
  jam82.general.gen_mac_from_name:
    name: "{{ virtinstall_fqdn }}"
    count: "{{ virtinstall_networks | length }}"
  register: _vm
  when: virtinstall_gen_mac_from_name | bool

- name: "Debug mac address generation"
  delegate_to: localhost
  ansible.builtin.debug:
    msg: "{{ _vm }}"
  when: virtinstall_gen_mac_from_name | bool

- name: "Install VM {{ virtinstall_name }}"   # noqa: jinja[spacing]
  delegate_to: "{{ virtinstall_host }}"
  ansible.builtin.command: >-2
    virt-install
    {% if virtinstall_autostart is defined and virtinstall_autostart | bool %}
      --autostart
    {% endif %}
    {% if virtinstall_boot | default([]) | length > 0 %}
      --boot {{ virtinstall_boot | join(',') | default(omit) }}
    {% endif %}
    {% if virtinstall_connection | default('') | length > 0 %}
      --connect {{ virtinstall_connection | default('omit') }}
    {% endif %}
    {% if virtinstall_console | default('') | length > 0 %}
      --console {{ virtinstall_console | default(omit) }}
    {% endif %}
    {% if virtinstall_cpu | default(2) %}
      --cpu {{ virtinstall_cpu | default(omit) }}
    {% endif %}
    {% if virtinstall_cpuset | default('') | length > 0 %}
      --cpuset {{ virtinstall_cpuset | default(omit) }}
    {% endif %}
    {% for disk in virtinstall_disks %}
      --disk {{ disk | default('pool=default,size=8') }}
    {% endfor %}
    {% if virtinstall_extra_args | default([]) | length > 0 %}
      --extra-args "{{ virtinstall_extra_args | join(' ') | default(omit) }}"
    {% endif %}
    {% if virtinstall_features | default([]) | length > 0 %}
      --features "{{ virtinstall_features | join(',') | default(omit) }}"
    {% endif %}
    {% for card in virtinstall_graphics %}
      --graphics {{ card | default('none') }}
    {% endfor %}
    {% if virtinstall_initrd_inject | default('') | length > 0 %}
      --initrd-inject {{ virtinstall_initrd_inject | default(omit) }}
    {% endif %}
    {% if virtinstall_location | default('') | length > 0 %}
      --location {{ virtinstall_location | default(omit) }}
    {% endif %}
    --memory {{ virtinstall_memory | default(2048) }}
    --name {{ virtinstall_name }}
    {% if _vm.macs | default([]) | length > 0 %}
      {% for mac in _vm.macs %}
        --network={{ virtinstall_networks[loop.index0] }},mac={{ mac }}
      {% endfor %}
    {% else %}
      {% for net in virtinstall_networks %}
        --network={{ net }}
      {% endfor %}
    {% endif %}
    {% if virtinstall_noautoconsole | default('noautoconsole') %}
      --{{ virtinstall_noautoconsole | ternary('noautoconsole','autoconsole') }}
    {% endif %}
    --os-variant={{ virtinstall_os_variant | default(generic) }}
    {% if virtinstall_pxe is defined and virtinstall_pxe | bool %}
      --pxe
    {% endif %}
    {% if virtinstall_reinstall | default(false) %}
      --reinstall {{ virtinstall_name }}
    {% endif %}
    --sound {{ virtinstall_sound | default(none) }}
    --vcpus={{ virtinstall_vcpus | default(2) }}
    --virt-type {{ virtinstall_virt_type | default(kvm) }}
  register: _install
  changed_when: _install is success
  when: virtinstall_name not in all_vms.list_vms
    or virtinstall_reinstall | bool
